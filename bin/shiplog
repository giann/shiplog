#!/usr/bin/env lua

local argparse = require "argparse"
local utils    = require "shiplog.utils"
local log      = require "shiplog.logging"
local config   = require "shiplog.config"
local shiplog  = require "shiplog"
local term     = require "term"
local lfs      = require "lfs"
local colors   = term.colors

local env = require "luasql.sqlite3".sqlite3()

local function parseEntryFilter(entry)
    local tags = {}
    local excludedTags = {}
    local attributes = {}
    local content = ""

    for _, line in ipairs(utils.split(entry, "\n")) do
        for _, word in ipairs(utils.split(line, " ")) do
            local trimmed = utils.trim(word)
            local prefix = trimmed:sub(1, 1)

            if prefix == "+" then
                table.insert(tags, trimmed:sub(2))
            -- TODO: find a way for argparse to let us use '-'
            elseif prefix == ":" then
                table.insert(excludedTags, trimmed:sub(2))
            else
                local key, value = trimmed:match("^([^:]+):(.*)")

                if key and value then
                    attributes[key] = value
                else
                    content = content .. word .. " "
                end
            end
        end
        content = content .. "\n"
    end

    content = utils.trim(content)

    return {
        content = content,
        tags = tags,
        excludedTags = excludedTags,
        attributes = attributes,
    }
end

local function getEntry(args, canBeEmpty)
    local entry = args.entry or args.filter

    -- Get entry from file
    if args.file then
        entry = utils.fileToString(args.file)
    elseif not entry or #entry == 0 and not canBeEmpty then
        if not term.isatty(io.stdin) then
            -- Get entry from stdin
            entry = io.stdin:read("a")
        else
            -- Get entry from editor
            local tmpFile = os.tmpname()

            -- Open tmp file with default editor
            if os.execute("$EDITOR " .. tmpFile) then
                -- Read tmp file
                entry = utils.fileToString(tmpFile)

                -- Remove tmp file
                os.remove(tmpFile)
            end
        end
    else
        entry = table.concat(entry, " ")
    end

    return entry and entry:len() > 0 and entry or (canBeEmpty and "" or nil)
end

-- Parse command line
local parser = argparse()
    :name "shiplog"
    :description "âš“ A journal keeping cli tool"
    :command_target("command")

parser:option "--dir -d"
    :description("Specify shiplog's directory (default is `" .. config.home .. "`")

parser:command "init i"
    :description "Init shiplog database and git repository"

local addCommand = parser:command "add a"
addCommand:description "Write a log entry"

addCommand
    :argument "entry"
    :description "The entry"
    :args "*" -- If not given, should come from stdin

addCommand:option "--file -f"
    :description "Use file content as entry"
    :args(1)

local modifyCommand = parser:command "modify mod m"
modifyCommand:description "Modify a log entry"

modifyCommand
    :argument "id"
    :description "Entry ID"
    :args(1)

modifyCommand
    :argument "entry"
    :description "Modifications"
    :args "*"

local deleteCommand = parser:command "delete del d"
deleteCommand:description "Delete an entry"

deleteCommand
    :argument "id"
    :description "Entry ID"
    :args(1)

local listCommand = parser:command "list ls l"
listCommand:description "List log entries"

listCommand
    :argument "filter"
    :description "Filter entries"
    :args "*"

listCommand
    :option "--limit -n"
    :description "Limit number of printed entries"
    :args(1)

listCommand
    :flag "--short -s"
    :description "Short entries (date and title)"

listCommand
    :option "--before -b"
    :description "Only show entry created before this date"
    :args(1)

local viewCommand = parser:command "view v"
viewCommand:description "View an entry"

viewCommand:argument "id"
    :description "Entry ID"
    :args(1)

local gitCommand = parser:command "git g"
gitCommand:description "Forward git commands to shiplog's repository"

gitCommand:argument "git-command-args"
    :description "Git command arguments"
    :args "+"

if arg[1] == "git" then
    local command = "git"
    local count = #arg
    for i = 2, count do
        command = command .. " " .. arg[i]
    end

    utils.dump(arg)

    os.execute(command)

    os.exit()
end

local args = parser:parse()

local home = args.dir or config.home
local db =  home .. "/log.db"

if args.command == "init" then
    local ok, err = lfs.mkdir(home)

    if not ok then
        log.failure("Could not initialize shiplog: `" .. err .. "`")

        os.exit(1)
    end

    -- touch
    ok, err = io.open(db, "w")

    if not ok then
        log.failure("Could not initialize shiplog: `" .. err .. "`")

        os.exit(1)
    end

    ok:close()

    log.success("Database created at `".. db .. "`")

    -- Init db
    -- TODO: find more elegant way to do this
    ok, err = os.execute("sqlite3 \"" .. db .. [[" "create table entries (
            rowid integer not null primary key,
            created_at timestamp default current_timestamp not null,
            updated_at timestamp,
            content text not null,
            location text
        );

        create table entries_tags (
            entry_id integer not null, 
            tag text not null,
            foreign key(entry_id) references entries(rowid),
            primary key(entry_id, tag)
        );"
    ]])

    if not ok then
        log.failure("Could not initialize shiplog: `" .. err .. "`")

        os.exit(1)
    end

    log.success("Database initialized")

    -- Init repo
    lfs.chdir(home)

    ok, err = os.execute("git init")

    if not ok then
        log.failure("Could not initialize shiplog: `" .. err .. "`")

        os.exit(1)
    end

    log.success("Git repository intialized at `" .. home .. "`")
else
    if not lfs.attributes(db) then
        log.warning("Shiplog appears to not be initialized yet. Pleas run `shiplog init`")

        os.exit(1)
    end

    local conn = assert(env:connect(db), "Could not connect to knowledge db")

    if args.command == "add" then
        local entry = getEntry(args)

        if entry then
            local ok, errOrId = shiplog.add(conn, parseEntryFilter(entry))

            if not ok then
                log.failure("Could not create entry: " .. errOrId)
            else
                shiplog.commit("Entry #" .. errOrId .. " created")
                log.success("Entry " .. colors.blue("#" .. errOrId) .. colors.green(" created"))
            end
        else
            log.failure "Missing entry"
        end
    elseif args.command == "modify" then
        local entry = getEntry(args)

        if entry then
            local ok, err = shiplog.modify(conn, args.id, parseEntryFilter(entry))

            if not ok then
                log.failure(err)
            else
                shiplog.commit("Entry #" .. args.id .. " modified")
                log.success("Entry modified")
            end
        else
            log.failure "Missing entry"
        end
    elseif args.command == "delete" then
        local ok, err = shiplog.delete(conn, args.id)

        if not ok then
            log.failure(err)
        else
            shiplog.commit("Entry #" .. args.id .. " deleted")
            log.success("Entry deleted")
        end
    elseif args.command == "list" then
        -- TODO: table with criteria
        shiplog.list(
            conn,
            parseEntryFilter(getEntry(args, true)),
            args.limit,
            args.before
        )
    elseif args.command == "view" then
        shiplog.view(conn, args.id)
    end

    conn:close()
end

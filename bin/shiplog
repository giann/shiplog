#!/usr/bin/env lua

local argparse = require "argparse"
local utils    = require "shiplog.utils"
local log      = require "shiplog.logging"
local config   = require "shiplog.config"
local shiplog  = require "shiplog"
local term     = require "term"
local colors   = term.colors

local env = require "luasql.sqlite3".sqlite3()
local conn = assert(env:connect(config.db), "Could not connect to knowledge db")

local function parseEntryFilter(parts)
    local tags = {}
    local excludedTags = {}
    local attributes = {}
    local content = ""

    for _, part in ipairs(parts) do
        local prefix = part:sub(1, 1)

        if prefix == "+" then
            table.insert(tags, part:sub(2))
        -- TODO: find a way for argparse to let us use '-'
        elseif prefix == ":" then
            table.insert(excludedTags, part:sub(2))
        else
            local key, value = part:match("^([^:]+):(.*)")

            if key and value then
                attributes[key] = value
            else
                content = content .. (content:len() > 0 and " " or "") .. part
            end
        end
    end

    return {
        content = content,
        tags = tags,
        excludedTags = excludedTags,
        attributes = attributes,
    }
end

local function getEntry(args, canBeEmpty)
    local entry = args.entry or args.filter

    -- Get entry from file
    if args.file then
        entry = utils.fileToString(args.file)
    elseif not entry or #entry == 0 and not canBeEmpty then
        if not term.isatty(io.stdin) then
            -- Get entry from stdin
            entry = io.stdin:read("a")
        else
            -- Get entry from editor
            local tmpFile = os.tmpname()

            -- Open tmp file with default editor
            if os.execute("$EDITOR " .. tmpFile) then
                -- Read tmp file
                entry = utils.split(utils.fileToString(tmpFile), " ")

                -- Remove tmp file
                os.remove(tmpFile)
            end
        end
    end

    return entry and #entry > 0 and entry or (canBeEmpty and {} or nil)
end

-- Parse command line
local parser = argparse()
    :name "shiplog"
    :description "âš“ A journal keeping cli tool"
    :require_command(false)
    :command_target("command")

local addCommand = parser:command "add a"
addCommand:description "Write a log entry"

addCommand
    :argument "entry"
    :description "The entry"
    :args "*" -- If not given, should come from stdin

addCommand:option "--file -f"
    :description "Use file content as entry"
    :args(1)

local modifyCommand = parser:command "modify mod m"
modifyCommand:description "Modify a log entry"

modifyCommand
    :argument "id"
    :description "Entry ID"
    :args(1)

modifyCommand
    :argument "entry"
    :description "Modifications"
    :args "*"

local deleteCommand = parser:command "delete del d"
deleteCommand:description "Delete an entry"

deleteCommand
    :argument "id"
    :description "Entry ID"
    :args(1)

local listCommand = parser:command "list ls l"
listCommand:description "List log entries"

listCommand
    :argument "filter"
    :description "Filter entries"
    :args "*"

listCommand
    :option "--limit -n"
    :description "Limit number of printed entries"

listCommand
    :flag "--short -s"
    :description "Short entries (date and title)"

local viewCommand = parser:command "view v"
viewCommand:description "View an entry"

viewCommand:argument "id"
    :description "Entry ID"
    :args(1)

local args = parser:parse()

if args.command == "add" then
    local entry = getEntry(args)

    if entry then
        local ok, errOrId = shiplog.add(conn, parseEntryFilter(entry))

        if not ok then
            log.failure("Could not create entry: " .. errOrId)
        else
            log.success("Entry " .. colors.blue("#" .. errOrId) .. colors.green(" created"))
        end
    else
        log.failure "Missing entry"
    end
elseif args.command == "modify" then
    local entry = getEntry(args)

    if entry then
        local ok, err = shiplog.modify(conn, args.id, parseEntryFilter(entry))

        if not ok then
            log.failure(err)
        else
            log.success("Entry modified")
        end
    else
        log.failure "Missing entry"
    end
elseif args.command == "delete" then
    local ok, err = shiplog.delete(conn, args.id)

    if not ok then
        log.failure(err)
    else
        log.success("Entry deleted")
    end
elseif args.command == "list" then
    shiplog.list(conn, parseEntryFilter(getEntry(args, true)), args.limit)
elseif args.command == "view" then
    shiplog.view(conn, args.id)
end

conn:close()

#!/usr/bin/env lua

local argparse         = require "argparse"
local log              = require "shiplog.logging"
local config           = require "shiplog.config"
local shiplog          = require "shiplog"
local term             = require "term"
local lfs              = require "lfs"
local colors           = term.colors
local parseEntryFilter = shiplog.parseEntryFilter
local getEntry         = shiplog.getEntry

local env = require "luasql.sqlite3".sqlite3()

-- Parse command line
local parser = argparse()
    :name "shiplog"
    :description "âš“ A journal keeping cli tool"
    :command_target("command")

-- TODO
-- parser:option "--dir -d"
--     :description("Specify shiplog's directory (default is `" .. config.home .. "`")

parser:command "init i"
    :description "Init shiplog database and git repository"

local addCommand = parser:command "add a"
addCommand:description "Write a log entry"

addCommand
    :argument "entry"
    :description "The entry. Any word prefixed by `+` will be added as a tag."
    :args "*" -- If not given, should come from stdin

addCommand:option "--file -f"
    :description "Use file content as entry"
    :args(1)

local modifyCommand = parser:command "modify mod m"
modifyCommand:description "Modify a log entry"

modifyCommand
    :argument "id"
    :description "Entry ID"
    :args(1)

modifyCommand
    :argument "entry"
    :description(
        "Modifications. Any word prefixed by `+` will be added as a tag."
        .. " Any word prefixed by `:` will be considered a tag to be deleted."
    )
    :args "*"

local deleteCommand = parser:command "delete del d"
deleteCommand:description "Delete an entry"

deleteCommand
    :argument "id"
    :description "Entry ID"
    :args(1)

local listCommand = parser:command "list ls l"
listCommand:description "List log entries"

listCommand
    :argument "filter"
    :description "Filter entries. You can filter in or out tags by prefixing the tag name by `+` or `:` respectively."
    :args "*"

listCommand
    :option "--limit -n"
    :description "Limit number of printed entries"
    :args(1)

listCommand
    :option "--before -b"
    :description "Only show entry created before this date"
    :args(1)

listCommand
    :flag "--short -s"
    :description "Short list with only titles and IDs"

local viewCommand = parser:command "view v"
viewCommand:description "View an entry"

viewCommand:argument "id"
    :description "Entry ID"
    :args(1)

local gitCommand = parser:command "git"
gitCommand:description "Forward git commands to shiplog's repository"

gitCommand:argument "git-command-args"
    :description "Git command arguments"
    :args "+"

-- Attributes

local attributeCommand = parser:command "attribute attr at"
attributeCommand:description "Manage attributes"
attributeCommand:command_target("attrCommand")

local addAttributeCommand = attributeCommand:command "add a"
addAttributeCommand:description "Add new attribute"

addAttributeCommand:argument "name"
    :description "Attribute's name"
    :args(1)

addAttributeCommand:argument "type"
    :description "Attribute's type (one of: 'string', 'number', 'boolean'"
    :args(1)

local modifyAttributeCommand = attributeCommand:command "modify mod m"
modifyAttributeCommand:description "Modify an attribute"

modifyAttributeCommand:argument "id"
    :description "Attribute's id"
    :args(1)

modifyAttributeCommand:argument "name"
    :description "Attribute's name"
    :args(1)

modifyAttributeCommand:argument "type"
    :description "Attribute's type (one of: 'string', 'number', 'boolean'"
    :args(1)

local deleteAttributeCommand = attributeCommand:command "delete del d"
deleteAttributeCommand:description "Delete an attribute"

deleteAttributeCommand:argument "id"
    :description "Attribute's id"
    :args(1)

local listAttributeCommand = attributeCommand:command "list ls l"
listAttributeCommand:description "List available attributes"

local home = config.home -- args.dir or config.home
local db =  home .. "/log.db"

if arg[1] == "git" then
    local command = "git"
    local count = #arg
    for i = 2, count do
        command = command .. " " .. (arg[i]:gsub("%s", "\\ "))
    end

    lfs.chdir(home)

    os.execute(command)

    os.exit()
end

local args = parser:parse()

if args.command == "init" then
    local ok, err = lfs.mkdir(home)

    if not ok then
        log.failure("Could not initialize shiplog: `" .. err .. "`")

        os.exit(1)
    end

    -- touch
    ok, err = io.open(db, "w")

    if not ok then
        log.failure("Could not initialize shiplog: `" .. err .. "`")

        os.exit(1)
    end

    ok:close()

    log.success("Database created at `".. db .. "`")

    -- Init db
    -- TODO: find more elegant way to do this
    ok, err = os.execute("sqlite3 \"" .. db .. [[" "create table entries (
            rowid integer not null primary key,
            created_at timestamp default current_timestamp not null,
            updated_at timestamp,
            content text not null,
            location text
        );

        create table entries_tags (
            entry_id integer not null, 
            tag text not null,
            foreign key(entry_id) references entries(rowid),
            primary key(entry_id, tag)
        );

        create table attributes (
            rowid integer not null primary key,
            name text not null unique,
            type text not null
        );

        create table entries_attributes (
            entry_id integer not null, 
            attribute_id integer not null,
            value text not null,
            foreign key(entry_id) references entries(rowid),
            foreign key(attribute_id) references attributes(rowid),
            primary key(entry_id, attribute_id)
        );"
    ]])

    if not ok then
        log.failure("Could not initialize shiplog: `" .. err .. "`")

        os.exit(1)
    end

    log.success("Database initialized")

    -- Init repo
    lfs.chdir(home)

    ok, err = os.execute("git init")

    if not ok then
        log.failure("Could not initialize shiplog: `" .. err .. "`")

        os.exit(1)
    end

    log.success("Git repository intialized at `" .. home .. "`")
else
    if not lfs.attributes(db) then
        log.warning("Shiplog appears to not be initialized yet. Pleas run `shiplog init`")

        os.exit(1)
    end

    local conn = assert(env:connect(db), "Could not connect to knowledge db")

    if args.command == "attribute" then
        if args.attrCommand == "add" then
            local ok, errOrId = shiplog.addAttribute(conn, args.name, args.type)

            if not ok then
                log.failure("Could not create attribute: " .. errOrId)
            else
                shiplog.commit(home, "Attribute #" .. errOrId .. " created")
                log.success("Attribute " .. colors.blue("#" .. errOrId) .. colors.green(" created"))
            end
        elseif args.attrCommand == "delete" then
            local ok, err = shiplog.deleteAttribute(conn, args.id)

            if not ok then
                log.failure(err)
            else
                shiplog.commit(home, "Attribute #" .. args.id .. " deleted")
                log.success("Attribute deleted")
            end
        elseif args.attrCommand == "modify" then
            local ok, err = shiplog.modifyAttribute(conn, args.id, args.name, args.type)

            if not ok then
                log.failure(err)
            else
                shiplog.commit(home, "Attribute #" .. args.id .. " modified")
                log.success("Attribute modified")
            end
        elseif args.attrCommand == "list" then
            shiplog.listAttributes(conn)
        end
    elseif args.command == "add" then
        local entry = getEntry(conn, args)

        if entry then
            local ok, errOrId = shiplog.add(conn, parseEntryFilter(entry))

            if not ok then
                log.failure("Could not create entry: " .. errOrId)
            else
                shiplog.commit(home, "Entry #" .. errOrId .. " created")
                log.success("Entry " .. colors.blue("#" .. errOrId) .. colors.green(" created"))
            end
        else
            log.failure "Missing entry"
        end
    elseif args.command == "modify" then
        local entry = getEntry(conn, args)

        if entry then
            local ok, err = shiplog.modify(conn, args.id, parseEntryFilter(entry))

            if not ok then
                log.failure(err)
            else
                shiplog.commit(home, "Entry #" .. args.id .. " modified")
                log.success("Entry modified")
            end
        else
            log.failure "Missing entry"
        end
    elseif args.command == "delete" then
        local ok, err = shiplog.delete(conn, args.id)

        if not ok then
            log.failure(err)
        else
            shiplog.commit(home, "Entry #" .. args.id .. " deleted")
            log.success("Entry deleted")
        end
    elseif args.command == "list" then
        -- TODO: table with criteria
        shiplog.list(
            conn,
            parseEntryFilter(getEntry(conn, args, true)),
            args.limit,
            args.before,
            args.short
        )
    elseif args.command == "view" then
        shiplog.view(conn, args.id)
    end

    conn:close()
end
